// 0                   1                   2                   3
// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
// +-+-+-+-+-+-+-+-+
// |    Version    |
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |     My Autonomous System      |
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |           Hold Time           |
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                         BGP Identifier                        |
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | Opt Parm Len  |
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                                                               |
// |             Optional Parameters (variable)                    |
// |                                                               |
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

use std::net::Ipv4Addr;
use pnet_macros_support::types::*;

#[packet]
pub struct BgpOpen {
    pub version: u8,
    pub asn: u16be,
    pub hold_time: u16be,
    #[construct_with(u8, u8, u8, u8)]
    pub router_id: Ipv4Addr,
    pub opt_param_len: u8,
    #[payload]
    pub payload: Vec<u8>,
}
